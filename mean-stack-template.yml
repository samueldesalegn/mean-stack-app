AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation stack for deploying a MEAN stack application

Parameters:
  JwtPrivateKey:
    Type: String
  Port:
    Type: String

Resources:
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-04b70fa74e45c3917
      KeyName: ec2-key-cft
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker $USER
          sudo apt-get install -y nodejs npm
          sudo npm install -g pm2

          # Install Git
          sudo apt-get install -y git

          # Clone the repository
          git clone https://github.com/samueldesalegn/mean-stack-app.git /home/ec2-user/app

          # Change to the app directory
          cd /home/ec2-user/app

          # Set environment variables
          echo "JWT_PRIVATE_KEY=${JwtPrivateKey}" >> /home/ec2-user/app/backend/.env
          echo "PORT=${Port}" >> /home/ec2-user/app/backend/.env

          # Run the backend
          cd backend
          npm install
          pm2 start server.js

          # Run the frontend
          cd ../frontend
          npm install
          npm run build -- --configuration production
          pm2 serve dist/frontend 4200 --spa

      Tags:
        - Key: Name
          Value: MyEC2Instance

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 80 and 4200
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4200
          ToPort: 4200
          CidrIp: 0.0.0.0/0

  MedicationsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Medications
      AttributeDefinitions:
        - AttributeName: medicationId
          AttributeType: S
      KeySchema:
        - AttributeName: medicationId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UsersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ElasticBeanstalkApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      ApplicationName: !Sub "${AWS::StackName}-app"

  ElasticBeanstalkEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    Properties:
      EnvironmentName: !Sub "${AWS::StackName}-env"
      ApplicationName: !Ref ElasticBeanstalkApplication
      SolutionStackName: "64bit Amazon Linux 2 v3.3.10 running Node.js 14"
      OptionSettings:
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: "InstanceType"
          Value: "t2.micro"
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: "EnvironmentType"
          Value: "SingleInstance"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "JWT_PRIVATE_KEY"
          Value: !Ref JwtPrivateKey
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "PORT"
          Value: !Ref Port
      VersionLabel: !Ref ApplicationVersion

  ApplicationVersion:
    Type: 'AWS::ElasticBeanstalk::ApplicationVersion'
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      SourceBundle:
        S3Bucket: "mean-stack-sam"
        S3Key: "mean-stack-app.zip"
