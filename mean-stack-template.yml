AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation stack for deploying a MEAN stack application with Elastic Beanstalk

Parameters:
  JwtPrivateKey:
    Type: String
  Port:
    Type: String

Resources:
  ElasticBeanstalkApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      ApplicationName: mean-stack-app
      Description: Elastic Beanstalk Application for MEAN stack

  ElasticBeanstalkApplicationVersion:
    Type: 'AWS::ElasticBeanstalk::ApplicationVersion'
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      Description: Version 1.0
      SourceBundle:
        S3Bucket: mean-stack-sam
        S3Key: mean-stack-app.zip  # Make sure to upload your application package to this S3 bucket

  ElasticBeanstalkEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    Properties:
      EnvironmentName: mean-stack-env
      ApplicationName: !Ref ElasticBeanstalkApplication
      VersionLabel: !Ref ElasticBeanstalkApplicationVersion
      SolutionStackName: "64bit Amazon Linux 2 v3.4.4 running Node.js 14"
      OptionSettings:
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: InstanceType
          Value: t2.micro
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: 'aws:elasticbeanstalk:container:nodejs'
          OptionName: NodeCommand
          Value: "npm start"
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: JWT_PRIVATE_KEY
          Value: !Ref JwtPrivateKey
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: PORT
          Value: !Ref Port

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 80 and 4200
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4200
          ToPort: 4200
          CidrIp: 0.0.0.0/0

  MedicationsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Medications
      AttributeDefinitions:
        - AttributeName: medicationId
          AttributeType: S
      KeySchema:
        - AttributeName: medicationId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UsersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
